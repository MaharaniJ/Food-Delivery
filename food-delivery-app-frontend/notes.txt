const loginWithGoogle = async () => {
    try {
      const result = await signInWithPopup(firebaseAuth, provider);
      // You don't need to attach an additional onAuthStateChanged listener here.
      // signInWithPopup already provides the user object in 'result.user'.
  
      const user = result.user;
  
      if (user) {
        const token = await user.getIdToken();
        console.log(token);
  
        // Assuming 'validateJWTToken' is an asynchronous function that returns a promise
        const data = await validateJWTToken(token);
        console.log(data);
  
        // Use 'replace' to navigate to the home page without adding a new history entry
        navigate("/", { replace: true });
      }
    } catch (error) {
      // Handle any errors that may occur during the authentication process
      console.error('Authentication error:', error);
    }
  };
  



  logouturl:
  export const logout = async (token) => {
  try {
    const response = await axios.post(`${baseURL}/api/users/logout`, null, {
      headers: {
        Authorization: "Bearer " + token,
      },
    });

    if (response.status === 200) {
      // Logout was successful

      console.log("Logout successful");
    } else {
      console.error("Logout failed with status:", response.status);
    }
  } catch (error) {
    console.error("Error during logout:", error);
  }
};


logout:App.js:

import { getAuth, signOut } from "firebase/auth";
const [userAuthenticated, setUserAuthenticated] = useState(false);
  const [userProfilePicture, setUserProfilePicture] = useState("");

  // Function to handle user login
  const handleLogin = (userProfilePicture) => {
    setUserAuthenticated(true);
    setUserProfilePicture(userProfilePicture);
  };

  const handleLogout = async () => {
    try {
      const auth = getAuth();
      await signOut(auth);
    } catch (error) {
      console.error("Error during logout:", error);
    }
    setUserAuthenticated(false);
    setUserProfilePicture(""); // Clear the profile picture URL
  };


<Navbar userAuthenticated={userAuthenticated}
        userProfilePictureUrl={userProfilePicture}
        onLogout={handleLogout} />

         <Route path="/login" element={<Login onLogin={handleLogin} />} />




   Navbar:
   import React from "react";
import { MdMarkEmailUnread } from "react-icons/md";
import { IoIosNotifications } from "react-icons/io";
import { Link } from "react-router-dom";
import {logout} from "../api/url";

function Navbar({ profilePictureUrl, isAuthenticated}) {
  const onLogout = () => {
    logout();
  };
  return (
    <div className="w-full fixed flex flex-row justify-between items-center border-2 py-6 bg-blue-600">
      <h1 className="ml-5 font-semibold text-4xl text-white">Tutorial</h1>
      <div className="flex flex-row gap-3 text-cyan-200 mr-4">
        <MdMarkEmailUnread />
        <IoIosNotifications />
        {isAuthenticated ? (
          <img
            src={profilePictureUrl}
            alt="User Profile"
            className="w-8 h-8 rounded-full object-cover cursor-pointer"
          />
        ) : (
          <>
            <Link
              to="/login"
              className="px-4 py-2 bg-green-500 text-white mr-3 mb-0 rounded-md hover:bg-green-600 transition-colors duration-300"
            >
              Login
            </Link>
            <button
              onClick={onLogout}
              className="px-4 py-2 bg-red-500 text-white mr-3 mb-0 rounded-md hover:bg-red-600 transition-colors duration-300"
              disabled={!isAuthenticated}
            >
              Logout
            </button>
          </>
        )}
      </div>
    </div>
  );
}

export default Navbar;
      